#! /usr/bin/env ruby
require 'pg'
require 'io/console'

class CLI
  attr_reader :application

  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.first

    if command == 'list'
      application.list_expenses
    elsif command == 'add'
      amount = arguments[1]
      memo = arguments[2]
      abort "You must provide an amount and memo." unless amount && memo
      application.add_expense(amount, memo)
    elsif command == 'search'
      memo = arguments[1]
      abort "You must provide a memo." unless memo
      application.search_expenses(memo)
    elsif command == 'delete'
      id = arguments[1]
      abort "You must provide an id." unless id
      application.delete_expense(id)
    elsif command == 'clear'
      puts "This will remove all expenses. Are you sure? ('y' to confirm)"
      answer = $stdin.getch.downcase
      application.delete_all_expenses if answer == 'y'
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

class ExpenseData
  attr_reader :connection

  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    connection.exec_params(sql, [amount, memo, date])
  end

  def list_expenses
    result = connection.exec("SELECT * FROM expenses ORDER BY created_on")

    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def search_expenses(query)
    sql = "SELECT * FROM expenses WHERE memo ~~* $1"
    result = connection.exec_params(sql, ["%#{query}%"])

    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = connection.exec_params(sql, [id])

    abort "There is no expense with the id '#{id}'." if result.ntuples == 0

    sql = "DELETE FROM expenses WHERE id = $1"
    connection.exec_params(sql, [id])

    puts "Deletion was successful. Data of tuple deleted was:"
    display_expenses(result)
  end

  def delete_all_expenses
    connection.exec('DELETE FROM expenses;')
    puts 'All expenses have been deleted.'
  end

  private

  def setup_schema
    result = connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]['count'] == '0'
      connection.exec <<~SQL
       CREATE TABLE expenses (
         id serial PRIMARY KEY,
         amount numeric(6, 2) NOT NULL,
         memo text NOT NULL,
         created_on date NOT NULL
       );
      SQL
    end
  end

  def display_count(expenses)
    count = expenses.ntuples
    if count == 0
      puts "There are no expenses."
    elsif count == 1
      puts "There is 1 expense."
    else
      puts "There are #{count} expenses."
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [tuple['id'].rjust(3),
                 tuple['created_on'].rjust(10),
                 tuple['amount'].rjust(12),
                 tuple['memo']
                ]
      puts columns.join(' | ')
    end

    puts '-' * 50

    amount_sum = expenses.field_values('amount').map(&:to_f).reduce(:+)

    puts "Total" + "#{amount_sum}".rjust(26)
  end
end

CLI.new.run(ARGV)
